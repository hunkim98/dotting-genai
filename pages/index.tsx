import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import {
  CanvasHoverPixelChangeHandler,
  Dotting,
  DottingData,
  DottingRef,
  PixelModifyItem,
  useDotting,
  useHandlers,
} from "dotting";
import { useCallback, useContext, useEffect, useRef, useState } from "react";
import axios from "axios";
import { pixelateImage } from "@/utils/image/pixelateImage";
import { getDataUri } from "@/utils/image/getDataUri";
import RightBar from "@/components/RightBar";
import { useAppDispatch, useAppSelector } from "@/lib/hooks";
import { setGeneratedImgUrls, setIsReceiving } from "@/lib/modules/genAi";
import { Button, Center, Input } from "@chakra-ui/react";
import { GenAiDataContext } from "@/context/GenAiDataContext";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const ref = useRef<DottingRef>(null);
  const { selectedDottingData, setSelectedDottingData } =
    useContext(GenAiDataContext);
  const isReceiving = useAppSelector((state) => state.genAi.isReceiving);
  const [prompt, setPrompt] = useState<string>("");
  const dispatch = useAppDispatch();
  const {
    addHoverPixelChangeListener,
    removeHoverPixelChangeListener,
    addCanvasElementEventListener,
    removeCanvasElementEventListener,
  } = useHandlers(ref);
  const { setIndicatorPixels } = useDotting(ref);

  const hoveredPixel = useRef<{
    rowIndex: number;
    columnIndex: number;
  } | null>(null);

  const imageUrlRef = useRef<string | null>(null);

  const handleSth = useCallback(() => {
    if (hoveredPixel.current === null) {
      return;
    }
  }, []);

  const handleHoverPixelChangeHandler =
    useCallback<CanvasHoverPixelChangeHandler>(
      (indices) => {
        if (indices === null) {
          return;
        }
        const { rowIndex, columnIndex } = indices;
        hoveredPixel.current = {
          rowIndex,
          columnIndex,
        };
        if (selectedDottingData === null) {
          return;
        }
        const tempIndicators: Array<PixelModifyItem> = [];
        selectedDottingData.forEach((dottingData, rowIndex) => {
          dottingData.forEach((dottingData, columnIndex) => {
            if (dottingData === null) {
              return;
            }
            tempIndicators.push({
              rowIndex,
              columnIndex,
              color: dottingData.color,
            });
          });
        });
        setIndicatorPixels(tempIndicators);
      },

      [hoveredPixel, setIndicatorPixels, selectedDottingData]
    );

  useEffect(() => {
    window.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        setSelectedDottingData(null);
      }
    });
  }, [setSelectedDottingData]);

  useEffect(() => {
    addCanvasElementEventListener("mousedown", (event) => {
      if (hoveredPixel.current === null) {
        console.log("no hovered pixel");
      }
      console.log("mousedown", event);
    });
    return () => {
      removeCanvasElementEventListener("mousedown", (event) => {
        console.log("mousedown", event);
      });
    };
  }, [
    addCanvasElementEventListener,
    removeCanvasElementEventListener,
    hoveredPixel,
  ]);

  useEffect(() => {
    addHoverPixelChangeListener(handleHoverPixelChangeHandler);
    return () => {
      removeHoverPixelChangeListener(handleHoverPixelChangeHandler);
    };
  }, [
    addHoverPixelChangeListener,
    removeHoverPixelChangeListener,
    handleHoverPixelChangeHandler,
  ]);

  const callImage = useCallback(async () => {
    dispatch(setIsReceiving(true));
    try {
      const response = await axios.post("api/openai/dalle", {
        queryPrompt: prompt,
      });
      const buffers = response.data.buffers;
      const tempImgUrls: Array<string> = [];
      for (const buffer of buffers) {
        const view = new Uint8Array(buffer);
        const blob = new Blob([view], { type: "image/png" });
        const url = URL.createObjectURL(blob);
        tempImgUrls.push(url);
      }
      dispatch(setGeneratedImgUrls(tempImgUrls));
      dispatch(setIsReceiving(false));
    } catch (error) {
      console.error(error);
      alert("Error has happened while generating image data");
      dispatch(setIsReceiving(false));
    }
  }, [dispatch, prompt]);

  const enhancePrompt = useCallback(async () => {
    if (!prompt) {
      alert("Please enter a prompt");
      return;
    }
    setPrompt("cartoon-style " + prompt + " with white background");
  }, [prompt, setPrompt]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main style={{ display: "flex", flexDirection: "column", width: "100%" }}>
        {isReceiving && <div>Receiving</div>}
        <div style={{ display: "flex" }}>
          <Dotting ref={ref} width={"100%"} height={500} />
          <RightBar />
        </div>
        <Center
          style={{
            alignSelf: "center",
            display: "flex",
            flexDirection: "column",
          }}
        >
          <Input
            value={prompt}
            style={{ fontSize: 20, margin: 5, padding: 10 }}
            onChange={(e) => {
              setPrompt(e.target.value);
            }}
          />
          <Button
            style={{
              // padding: 10,
              margin: 5,
            }}
            onClick={enhancePrompt}
          >
            Enhance prompt
          </Button>
          <Button colorScheme="teal" style={{ margin: 5 }} onClick={callImage}>
            Generate images
          </Button>
        </Center>
      </main>
    </>
  );
}
