import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import {
  CanvasHoverPixelChangeHandler,
  Dotting,
  DottingRef,
  useHandlers,
} from "dotting";
import { useCallback, useEffect, useRef, useState } from "react";
import axios from "axios";
import { pixelateImage } from "@/utils/image/pixelateImage";
import { getDataUri } from "@/utils/image/getDataUri";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const ref = useRef<DottingRef>(null);
  const {
    addHoverPixelChangeListener,
    removeHoverPixelChangeListener,
    addCanvasElementEventListener,
    removeCanvasElementEventListener,
  } = useHandlers(ref);
  const [isReceiving, setIsReceiving] = useState(false);

  const hoveredPixel = useRef<{
    rowIndex: number;
    columnIndex: number;
  } | null>(null);

  const imageUrlRef = useRef<string | null>(null);

  const handleHoverPixelChangeHandler: CanvasHoverPixelChangeHandler = (
    indices
  ) => {
    if (indices === null) {
      return;
    }
    hoveredPixel.current = {
      rowIndex: indices.rowIndex,
      columnIndex: indices.columnIndex,
    };
  };

  useEffect(() => {
    addCanvasElementEventListener("mousedown", (event) => {
      if (hoveredPixel.current === null) {
        console.log("no hovered pixel");
      }
      console.log("mousedown", event);
    });
    return () => {
      removeCanvasElementEventListener("mousedown", (event) => {
        console.log("mousedown", event);
      });
    };
  }, [
    addCanvasElementEventListener,
    removeCanvasElementEventListener,
    hoveredPixel,
  ]);

  useEffect(() => {
    addHoverPixelChangeListener(handleHoverPixelChangeHandler);
    return () => {
      removeHoverPixelChangeListener(handleHoverPixelChangeHandler);
    };
  }, [addHoverPixelChangeListener, removeHoverPixelChangeListener]);

  const callImage = useCallback(async () => {
    setIsReceiving(true);
    try {
      const response = await axios.post("api/openai/dalle", {
        queryPrompt: "Hello world",
      });
      const buffer = response.data.buffer;

      const view = new Uint8Array(buffer);
      console.log(view, "uintarray");
      const blob = new Blob([view], { type: "image/png" });
      const url = URL.createObjectURL(blob);
      const { imgUrl, data } = await pixelateImage(url, 10);
      // console.log(data);
      console.log(imgUrl);
      setIsReceiving(false);
    } catch (error) {
      console.error(error);
      setIsReceiving(false);
    }
  }, [imageUrlRef]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {isReceiving && <div>Receiving</div>}
        <Dotting ref={ref} width={"100%"} height={500} />
        {/* <img src="https://oaidalleapiprodscus.blob.core.windows.net/private/org-5LdEtBGsishA9Li1KToYT2JD/user-1A4dVu9RP1StfUY5mDpbxswd/img-IPLUJ58r11qZv2ELv6ofKPUd.png?st=2023-03-23T16%3A49%3A17Z&se=2023-03-23T18%3A49%3A17Z&sp=r&sv=2021-08-06&sr=b&rscd=inline&rsct=image/png&skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2023-03-23T17%3A29%3A13Z&ske=2023-03-24T17%3A29%3A13Z&sks=b&skv=2021-08-06&sig=zRHUrf1zb3PAYYIXNsD6CJJ9t%2BhVgkS6Px5wF/iUg4E%3D" /> */}
        <button onClick={callImage}>Test</button>
      </main>
    </>
  );
}
